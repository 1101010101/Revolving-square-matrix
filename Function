//旋转正方形矩阵 
//【题目】 给定一个整型正方形矩阵matrix，请把该矩阵调整成 顺时针旋转90度的样子。 
//【要求】 额外空间复杂度为O(1)。
#include<iostream>
#include<stdlib.h>
#include<vector>
using namespace std;

void rotate(vector<vector<int>>& m);

void rotateEdge(vector<vector<int>>& m, int tr, int tc, int dr, int dc);

void printMatrix(vector<vector<int>>& m);
int main()
{
	int a[] = { 1,2,3,4 };
	vector<int> ivec(a, a + 4);
	vector<vector<int>> m;
	m.push_back(ivec);
	ivec[0] = 5;
	ivec[1] = 6;
	ivec[2] = 7;
	ivec[3] = 8;
	m.push_back(ivec);
	ivec[0] = 9;
	ivec[1] = 10;
	ivec[2] = 11;
	ivec[3] = 12;
	m.push_back(ivec);
	ivec[0] = 13;
	ivec[1] = 14;
	ivec[2] = 15;
	ivec[3] = 16;
	m.push_back(ivec);
	printMatrix(m);
	rotate(m);
	cout << "=====================" << endl;
	printMatrix(m);
	system("pause");
	return 0;
}
void rotate(vector<vector<int>>& m)
{
	int tr(0), tc(0);
	int dr = m.size() - 1, dc = m[0].size() - 1;
	while (tr < dr)
	{
		rotateEdge(m, tr++, tc++, dr--, dc--);
	}
}

void rotateEdge(vector<vector<int>>& m, int tr, int tc, int dr, int dc)
{
	int time(dc - tc);
	int tmp(0);
	for (int i(0); i != time; i++)
	{
		tmp = m[tr][tc + i];
		m[tr][tc + i] = m[dr - i][tc];
		m[dr - i][tc] = m[dr][dc - i];
		m[dr][dc - i] = m[tr + i][dc];
		m[tr + i][dc] = tmp;
	}
}

void printMatrix(vector<vector<int>>& m)
{
	int q1 = m.size();
	int q2 = m[0].size();
	for (int i(0); i != q1; i++)
	{
		for (int j(0); j != q2; j++)
			cout << m[i][j] << " ";
		cout << endl;
	}
}
